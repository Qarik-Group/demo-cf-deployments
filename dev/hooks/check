#!/bin/bash
set -u
#Version check
min_version="2.7.0"
genesis_version="$(genesis -v 2>&1 | grep '^Genesis v' | sed -e 's/Genesis v\(.*\) (.*$/\1/')"
if ! [[ "$genesis_version" =~ -dev$ ]] && ! new_enough "$genesis_version" "$min_version" ; then
  describe >&2 "" \
    "#R{[ERROR]} This kit needs Genesis $min_version.  Please upgrade before continuing" ""
  exit 1
fi
set -e

cc_ok=yes
# Cloud Config checks
if [[ -z "$GENESIS_CLOUD_CONFIG" ]] ; then
  describe >&2 "  cloud config [#R{MISSING}]"
  cc_ok=no
fi

# Runtime config checks
runtime_ok=yes

# # Check for BOSH DNS
if ! rcq -e '.addons[] | .name | select(. == "bosh-dns")' &>/dev/null; then
  runtime_ok=no
  describe >&2 \
    "  #R{Errors were found} in your runtime-config:" \
    "    - #R{BOSH DNS is not in the runtime-config, which is required. Refer to}" \
    "      #R{'genesis man $GENESIS_ENVIRONMENT' for more info.}" ""
fi

# Check if there were any errors reported from runtime config checks
if [[ "$runtime_ok" == "yes" ]]; then
  describe >&2 "  runtime config [#G{OK}]"
else
  describe >&2 "  runtime config [#R{FAILED}]"
fi

env_ok=yes
# Environment Parameter checks - none yet!
version="$(exodus kit_version)"
if [[ -n "${version:-}" ]] ; then
  set +e
  if ! new_enough "$version" "2.0.0-rc0" ; then
    describe >&2 "" "  #C{[Checking Upgrade from $version]}"

    if ! new_enough "${version}" "1.10.1" ; then
      describe >&2 "    #R{[ERROR]} Please upgrade to at least cf kit 1.10.1 before upgrading to v2.x.x"
      env_ok=no
    else
      #TODO: Check if safe secrets are present to be imported by migration hook
      :
    fi
  fi
  set -e
fi

declare -a retired_params
retired_params=()
for param in api_domain default_app_memory default_app_disk_in_mb \
             default_stack uaa_lockout_failure_count \
             uaa_lockout_window uaa_lockout_time uaa_refresh_token_validity \
             grootfs_reserved_space vm_strategy max_log_lines_per_second  ; do
  if [[ -n "$(lookup "params.$param" )" ]] ; then
    retired_params+=( "  - #R{params.$param}" )
    [[ "$GENESIS_IGNORE_RETIRED_PARAMS" =~ ^(y|yes|1|true)$ ]] || env_ok=no
  fi
done
if [[ ${#retired_params[@]} -gt 0 ]] ; then
  describe >&2 \
    "Using the following retired parameters -- see #g{genesis man $GENESIS_ENVIRONMENT} to resolve:" \
    ${retired_params[@]+"${retired_params[@]}"}
fi

if [[ "$env_ok" == "yes" ]]; then
  describe >&2 "  environment files [#G{OK}]"
else
  describe >&2 "  environment files [#R{FAILED}]"
fi

[[ "$env_ok" == "no" || "$cc_ok" == "no" || "$runtime_ok" == no ]] && exit 1
exit 0

